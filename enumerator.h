
#ifndef ENUMERATOR_H
#define ENUMERATOR_H

#include <QString>

enum RunMode {
    RUNMODE_DEBUG,
    RUNMODE_RELEASE,
    RUNMODE_EXPERIMENT,
    RUNMODE_SIZE
};

#define RUNMODE RUNMODE_DEBUG

enum ThaResult
{
    THA_RESULT_KDEFF,
    THA_RESULT_STOIC,  // ND / NA
    THA_RESULT_EAMAX,
    THA_RESULT_EDMAX,
    THA_RESULT_SIZE
};

// Channel Name
enum ChannelName {
    CHANNEL_NAME_AA,
    CHANNEL_NAME_DA,
    CHANNEL_NAME_DD,
    CHANNEL_NAME_SIZE // NaC means not a channel name
};

enum RatioName {
    RATIO_NAME_A,
    RATIO_NAME_B,
    RATIO_NAME_C,
    RATIO_NAME_D,
    RATIO_NAME_G,
    RATIO_NAME_K,
    RATIO_NAME_Y,
    RATIO_NAME_SIZE    // NaP means "Not a ratio"
};

enum CalcProcess {
    SET_PARAM, LOAD_DATA, CORRECT_DATA, CALC_DATA
};

enum CalcResult {
    Ed, Rad, Ea, Rda, Aest, Dest, Afree, Dfree
};

enum TableHeader {  // 14ä¸ª
    TABLE_HEADER_IAA,
    TABLE_HEADER_IDA,
    TABLE_HEADER_IDD,
    TABLE_HEADER_ED,
    TABLE_HEADER_RAD,
    TABLE_HEADER_EA,
    TABLE_HEADER_RDA,
    TABLE_HEADER_AEST,
    TABLE_HEADER_DEST,
    TABLE_HEADER_RECTX,
    TABLE_HEADER_RECTY,
    TABLE_HEADER_RECTW,
    TABLE_HEADER_RECTH,
    TABLE_HEADER_VIEW,
    TABLE_HEADER_SIZE
};

enum ChartName
{
    CHART_NAME_ED_RAD,
    CHART_NAME_EA_RDA,
    CHART_NAME_ED_AFREE_OURS,
    CHART_NAME_EA_DFREE_OURS,
    CHART_NAME_ED_AFREE_BEN,
    CHART_NAME_EA_DFREE_BEN,
    CHART_NAME_SIZE
};

enum ViewType
{
    VIEW_TYPE_MERGED,
    VIEW_TYPE_AANORM,
    VIEW_TYPE_DANORM,
    VIEW_TYPE_DDNORM,
    VIEW_TYPE_RCPSEU,
    VIEW_TYPE_EDPSEU,
    VIEW_TYPE_SIZE
};
enum CursorPosition
{
    CURSOR_POSITION_MIDDLE,
    CURSOR_POSITION_TOP,
    CURSOR_POSITION_BOTTOM,
    CURSOR_POSITION_LEFT,
    CURSOR_POSITION_RIGHT,
    CURSOR_POSITION_TOPLEFT,
    CURSOR_POSITION_TOPRIGHT,
    CURSOR_POSITION_BOTTOMLEFT,
    CURSOR_POSITION_BOTTOMRIGHT,
    CURSOR_POSITION_OUTSIDE,
    CURSOR_POSITION_SIZE
};

enum DrawMode {
    DRAW_MODE_CROP,
    DRAW_MODE_STAMP,
    DRAW_MODE_SIZE
};

enum class Strategy {
    LOOSE,
    MODERATE,
    STRICT
};

class Enumerator
{
public:
    Enumerator();
    static ChannelName showTypeToChannelName(ViewType viewType);
    static QString chartNameToQString(ChartName chartName);
};

#endif // ENUMERATOR_H
